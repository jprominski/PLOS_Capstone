install.packages('car')
install.packages('clusterGeneration')
install.packages('e1071')
install.packages('forecast')
install.packages('foreign')
install.packages('h2o')
install.packages('kernlab')
install.packages('lars')
install.packages('lubridate')
install.packages('maptools')
install.packages('MASS')
install.packages('mlbench')
install.packages('RCurl')
install.packages('RColorBrewer')
install.packages('rjson')
install.packages('ROCR')
install.packages('SnowballC')
install.packages('tm')
install.packages('topicmodels')
install.packages('XML')
install.packages('zoo')
install.packages('VIM')
install.packages("openNLPmodels.en", repos = "http://datacube.wu.ac.at/", type = "source")
install.packages9
install.packages('rgdal')
install.packages('rgeos')
install.packages('ks')
library('rgeos')
library('ks')
library('rgdal')
source('~/Untitled.R')
x <- c(1,3,2,5)
x
x = c(1,6,2)
x
y = c(1,4,3)
length(x)
length(y)
x+y
ls()
rm(x,y)
ls()
rm(list=ls())
?matrix
x = matric(data=c(1,2,3,4), nrow=2, ncol=2)
x = matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x
x = matrix(c(1,2,3,4), 2, 2)
x
matrix(c(1,2,3,4),2,2, byrow=TRUE)
sqrt(x)
x^2
x = rnorm(50)
x
y = x + rnorm(50, mean=50, sd=.1)
y
cor(x,y)
set.seed(1303)
rnorm(50)
rnorm(50)
set.seed(1303)
rnorm(50)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x = rnorm(100)
y = rnorm(100)
plot(x,y)
plot(x,y,xlab = "this is the x-axis",ylab="this is the y-axis",main="Plot of X vs Y")
pdf("Figure.pdf")
plot(x,y,col="green")
dev.off()
x = seq(1,10)
x = 1:10
x
x = seq(-pi,pi,length=50)
?contour
y = x
f = outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa = (f-t(f))/2
contour(x,y,fa,nlevels=15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30)
A = matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-c(1,3),]
A[-c(1,3),-c(1,3,4)]
dim(A)
Auto=read.table("Auto.data")
setwd("~/")
Auto=read.table("Auto.data")
install.packages('ISLR')
Auto=read.table("Auto.data")
library('ISLR')
Auto=read.table("Auto.data")
Auto=read.table("Auto.data")
Auto = read.table('/Users/jackprominski/ISLR/data/Auto.rda')
View(Auto)
load("/Users/jackprominski/ISLR/data/Auto.rda")
Auto=read.table("Auto.rda")
names(Auto)
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
plot(Auto$cylinders, Auto$mpg)
plot(cylinders, mpg)
cylinders = as.factor(cylinders)
plot(cylinders,mpg)
plot(cylinders,mpg)
plot(cylinders,mpg, col="red")
plot(cylinders,mpg, col="red", varwidth=T)
plot(cylinders,mpg, col="red", varwidth=T, horizontal=T)
plot(cylinders,mpg)
plot(cylinders,mpg, col="red", varwidth=T, xlab="cylinders", ylab="MPG")
hist(mpg)
hist(mpg, col=2)
hist(mpg, col=2, breaks=15)
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
identify(horsepower,mpg,name)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
summary(Auto)
summary(mpg)
q()
est.kde.univariate = function(x, sample, bandwidth) {
h <-  bandwidth # Assign bandwidth to h
n <- length(sample) # Calculate sample size
# Generate KDE estimate
kde <- (1/(n*h))*(sum(sapply((x-sample)/h,function(x) (1/(sqrt(2*pi))*exp(-x^2/2)))))
kde # Return KDE
}
sample <- c(rnorm(1000,4,1),rnorm(1000,12,1)) # Generate sample data
x <- seq(0,16,by=.01) # Generate evenly spaced x*s to calculate KDE
h <- .0001 # Reset bandwidth
kde.0001 <- lapply(x, FUN = est.kde.univariate, sample, h) # Estimate KDE over all values x*
h <- .01 # Set bandwidth
kde.01 <- lapply(x, FUN = est.kde.univariate, sample, h) # Estimate KDE over all values x*
# Run KDE function at bandwidth .1
h <- 0.1 # Reset bandwidth
kde.1 <- lapply(x, FUN = est.kde.univariate, sample, h) # Estimate KDE over all values x*
# Run KDE function at bandwidth 1
h <- 1 # Reset bandwidth
kde1 <- lapply(x, FUN = est.kde.univariate, sample, h) # Estimate KDE over all values x*
# Run KDE function at bandwidth 5
h <- 5 # Reset bandwidth
kde5 <- lapply(x, FUN = est.kde.univariate, sample, h) # Estimate KDE over all values x*
hist(sample, axes=FALSE, ylab='', xlab='', freq=FALSE)
hist(sample, axes=FALSE, ylab='', xlab='', breaks=100)
plot(x,kde.0001, ylim=ylim, col='purple', ylab='density')
par(new=TRUE)
plot(x,kde.01, ylim=ylim, col='blue', ylab='density')
par(new=TRUE)
plot(x,kde.1, ylim=ylim, col='red', ylab='')
par(new=TRUE)
plot(x,kde1, ylim=ylim, col='yellow', ylab='')
par(new=TRUE)
plot(x,kde5, ylim=ylim, col='green', ylab='')
par(new=TRUE)
# Overlay histogram
hist(sample, axes=FALSE, ylab='', xlab='', breaks=100, freq=FALSE)
ylim=c(0,.4) # Set y-cords for plot
plot(x,kde.0001, ylim=ylim, col='purple', ylab='density')
par(new=TRUE)
plot(x,kde.01, ylim=ylim, col='blue', ylab='density')
par(new=TRUE)
plot(x,kde.1, ylim=ylim, col='red', ylab='')
par(new=TRUE)
plot(x,kde1, ylim=ylim, col='yellow', ylab='')
par(new=TRUE)
plot(x,kde5, ylim=ylim, col='green', ylab='')
par(new=TRUE)
# Overlay histogram
hist(sample, axes=FALSE, ylab='', xlab='', breaks=100, freq=FALSE)
rug(sample)
plot(x,kde.0001, ylim=ylim, col='purple', ylab='density')
par(new=TRUE)
plot(x,kde.01, ylim=ylim, col='blue', ylab='density')
par(new=TRUE)
plot(x,kde.1, ylim=ylim, col='red', ylab='')
par(new=TRUE)
plot(x,kde1, ylim=ylim, col='yellow', ylab='')
par(new=TRUE)
plot(x,kde5, ylim=ylim, col='green', ylab='')
par(new=TRUE)
# Overlay histogram
hist(sample, axes=FALSE, ylab='', xlab='', breaks=100)
rug(sample)
plot(x,kde.0001, ylim=ylim, col='purple', ylab='density')
par(new=TRUE)
plot(x,kde.01, ylim=ylim, col='blue', ylab='density')
par(new=TRUE)
plot(x,kde.1, ylim=ylim, col='red', ylab='')
par(new=TRUE)
plot(x,kde1, ylim=ylim, col='yellow', ylab='')
par(new=TRUE)
plot(x,kde5, ylim=ylim, col='green', ylab='')
par(new=TRUE)
# Overlay histogram
hist(sample, axes=FALSE, ylab='', xlab='', breaks=100)
rug(sample)
setwd("~/Desktop/UVA DSI/Capstone/articles.O-Z.xml")
package(XML)
library(XML)
data <- xmlParse('PMC5560716.nxml')
setwd("~/Desktop/UVA DSI/Capstone")
data <- xmlParse('PMC5560716.nxml')
data
setwd("~/Desktop/UVA DSI/SYS6018/Corpus")
data1 <- xmlToDataFrame('PMC5560716.nxml')
library(XML)
library(tm)
library(topicmodels)
set.seed(1)
news = as.data.frame(xmlToDataFrame("news_documents.xml", stringsAsFactors = FALSE)[,"c"])
View(news)
news = VCorpus(DataframeSource(news))
data
write.csv(data, 'write.txt')
library(XML)
write.xml(data, 'parse.xml')
saveXML(data, 'parse.xml')
data2 <- xmlTreeParse('PMC5560716.nxml')
data2
xmlChildren(data2)
xmlChildren('PMC5560716.nxml')
xmlChildren(node)[[1]]
xmlChildren(<sec>)[[1]]
xmlChildren('<sec>')[[1]]
xmlChildren(data2)[[1]]
xmlChildren(data)[[1]]
xmlChildren(data)
xmlChildren(data)[1:5]
xmlChildren(data)[2]
xmlChildren(data)[1]
data2
warnings()
data2
data
xpathSApply(data,"Introduction")
ext <- xpathSApply(data,"Introduction")
xml_data <- xmlToList(data)
xml_data2 <- xmlToList(data2)
xml_data
xml_data2
write.table(xml_data,'xmlwrite.txt')
xml_data[1]
xml_data[2]
xml_data[3]
xml_data[2]
xml_data$body
xml_data$body$sec
doc <- xmlTreeParse('PMC5560716.nxml')
doc <- xmlTreeParse('PMC5560716.nxml', useInternal=TRUE)
top <- xmlRoot(doc)
top
xmlName(top)
names(top)
names(top[[3]])
library(tidyverse)
sec <- top[[3]][['sec']]
sec
intro <- top[[3]][['sec']]
typeof(intro)
intro_con <- xmlValue(top[[3]][['sec']])
intro_con
typeof(intro_con)
intro <- xmlValue(top[[3]][['sec']])
intro
intro[1]
intro[2]
setwd("~/Desktop/UVA DSI/SYS6018")
setwd("~/Desktop/UVA DSI/SYS6018")
dir('Corpus')
filenames <- dir('Corpus')[2]
filenames <- dir('Corpus')[3:]
filenames <- dir('Corpus')[3:191]
filenames
setwd("~/Desktop/UVA DSI/SYS6018/Corpus")
length(filenames)
for(i in 1:length(filenames)) {
doc <- xmlTreeParse(filenames[i], useInternal=TRUE)
top <- xmlRoot(doc)
intro[i] <- xmlValue(top[[3]][['sec']])
}
intro
intro[i] <- as.data.frame(xmlValue(top[[3]][['sec']]))
intro
introdf <- as.data.frame(intro)
View(introdf)
intro <- []
intro <- 0
for(i in 1:length(filenames)) {
doc <- xmlTreeParse(filenames[i], useInternal=TRUE)
top <- xmlRoot(doc)
intro[i] <- xmlValue(top[[3]][['sec']])
}
introdf <- as.data.frame(intro)
View(introdf)
introdf <- as.data.frame(intro, stringsAsFactors = FALSE)
introdf2 <- gsub('Introduction', "", introdf) # Clean data
introdf2
introdf2 <- as.data.frame(gsub('Introduction', "", introdf))
View(introdf2)
introdf2 <- as.data.frame(gsub('Introduction', "", introdf$intro))
View(introdf)
introdf2 <- as.data.frame(gsub('Introduction*', "", introdf$intro))
View(introdf2)
introdf2 <- as.data.frame(sub('Introduction*', "", introdf$intro))
library(XML)
library(tidyverse)
library(tm)
library(topicmodels)
setwd("~/Desktop/UVA DSI/SYS6018")
filenames <- dir('Corpus')[3:191]
setwd("~/Desktop/UVA DSI/SYS6018/Corpus")
filenames
for(i in 1:length(filenames)) {
doc <- xmlTreeParse(filenames[i], useInternal=TRUE)
top <- xmlRoot(doc)
intro[i] <- xmlValue(top[[3]][['sec']])
}
introdf <- as.data.frame(intro, stringsAsFactors = FALSE)
introdf <- as.data.frame(sub('Introduction*', "", introdf$intro))
setwd("~/Desktop/UVA DSI/SYS6018")
filenames <- dir('Corpus')[3:191]
setwd("~/Desktop/UVA DSI/SYS6018/Corpus")
for(i in 1:length(filenames)) {
doc <- xmlTreeParse(filenames[i], useInternal=TRUE)
top <- xmlRoot(doc)
intro[i] <- xmlValue(top[[3]][['sec']])
}
introdf <- as.data.frame(intro, stringsAsFactors = FALSE)
introdf <- as.data.frame(sub('Introduction*', "", introdf$intro))
intro <- 0
for(i in 1:length(filenames)) {
doc <- xmlTreeParse(filenames[i], useInternal=TRUE)
top <- xmlRoot(doc)
intro[i] <- xmlValue(top[[3]][['sec']])
}
introdf <- as.data.frame(intro, stringsAsFactors = FALSE)
introdf <- as.data.frame(sub('Introduction*', "", introdf$intro))
View(introdf)
intro_corp = VCorpus(DataframeSource(introdf))
intro_corp
intro_clean = tm_map(intro_corp, stripWhitespace)                          # remove extra whitespace
intro_clean = tm_map(intro_clean, removeNumbers)                      # remove numbers
intro_clean = tm_map(intro_clean, removePunctuation)                  # remove punctuation
intro_clean = tm_map(intro_clean, content_transformer(tolower))       # ignore case
intro_clean = tm_map(intro_clean, removeWords, stopwords("english"))  # remove stop words
intro_clean = tm_map(intro_clean, stemDocument)                       # stem all words
intro_clean.tf = DocumentTermMatrix(intro_clean, control = list(weighting = weightTf))
intro_clean.tf
row.sums = apply(intro_clean.tf, 1, sum)
intro_corp = intro_corp[row.sums > 0]
intro_clean.tf = intro_clean.tf[row.sums > 0,]
intro_clean.tf
topic.model = LDA(intro_clean.tf, 10)
terms(topic.model, 10)[,1:5]
document.most.likely.topic = topics(topic.model, 1)
document.topic.clusters = split(news, document.most.likely.topic)
document.topic.clusters = split(intro_corp, document.most.likely.topic)
document.topic.clusters[[1]]  # document whose most likely topic is "1"
for(cluster.num in 1:3)
{
# print the first 2 documents in the current cluster
num.docs.in.cluster = length(document.topic.clusters[[cluster.num]])
for(doc.num in 1:min(2,num.docs.in.cluster))
{
print(paste("Cluster", cluster.num, ", Document", doc.num, ": ", document.topic.clusters[[cluster.num]][[doc.num]]$content))
}
}
topic.model2 = LDA(intro_clean.tf, 2)
terms(topic.model2, 10)
terms(topic.model5, 10)
topic.model5 = LDA(intro_clean.tf, 5)
terms(topic.model5, 10)
topic.model10 = LDA(intro_clean.tf, 10)
terms(topic.model10, 10)
topic.model25 = LDA(intro_clean.tf, 25)
terms(topic.model25, 10)
topics(topic.model25, 5)[,1:10]
topic.model10 = LDA(intro_clean.tf, 10)[:1,5]
topic.model10 = LDA(intro_clean.tf, 10)[1,5]
topic.model10 = LDA(intro_clean.tf, 10)[,1:5]
terms(topic.model10, 10)[,1:5]
topic.model50 = LDA(intro_clean.tf, 50)
terms(topic.model25, 10)[,1:5]
terms(topic.model25, 10)[,1:10]
terms(topic.model10, 10)[,1:10]
terms(topic.model50, 10)[,1:50]
terms(topic.model25, 10)[,1:20]
terms(topic.model5, 10)
terms(topic.model10, 10)[,1:10]
terms(topic.model25, 10)
terms(topic.model25, 10)[2]
terms(topic.model25, 10)[,2]
terms(topic.model25, 10)[,c(2,4,6)]
terms(topic.model50, 10)[,1:20]
terms(topic.model50, 10)[,c(7,17)
terms(topic.model25, 10)[,c(2,4,6)]
terms(topic.model50, 10)[,c(7,17)]
terms(topic.model25, 10)[,c(2,6)]
setwd("~/Desktop/UVA DSI/SYS6018")
filenames <- dir('Corpus')[3:191]
setwd("~/Desktop/UVA DSI/SYS6018/Corpus")
intro <- 0
for(i in 1:length(filenames)) {
doc <- xmlTreeParse(filenames[i], useInternal=TRUE)
top <- xmlRoot(doc)
intro[i] <- xmlValue(top[[3]][['sec']])
}
library(XML)
library(tidyverse)
library(tm)
library(topicmodels)
for(i in 1:length(filenames)) {
doc <- xmlTreeParse(filenames[i], useInternal=TRUE)
top <- xmlRoot(doc)
intro[i] <- xmlValue(top[[3]][['sec']])
}
introdf <- as.data.frame(intro, stringsAsFactors = FALSE)
View(introdf)
